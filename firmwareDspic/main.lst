CCS PCD C Compiler, Version 4.104, 48421               10-May-13 09:54

               Filename: C:\Users\Juan Andres\SkyDrive\Documentos\Projects\Tesis Simulador Auto\firmwareDspic\main.lst

               ROM used: 4616 bytes (14%)
                         Largest free fragment is 28152
               RAM used: 177 (9%) at main() level
                         265 (13%) worst case
               Stack:    5 worst case (3 in main + 2 for interrupts)

*
0000:  GOTO    1042
*
001A:  DATA    B0,01,00
*
0020:  DATA    88,02,00
*
002A:  DATA    D8,02,00
.................... #include <main.h> 
.................... #include <30F4011.h> 
.................... //////// Standard Header file for the DSPIC30F4011 device //////////////// 
.................... #device DSPIC30F4011 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #INCLUDE <MATH.H> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
*
073C:  MOV     W5,[W15++]
073E:  MOV     W6,[W15++]
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
0740:  BCLR.B  845.0
....................    y = x; 
0742:  PUSH    840
0744:  POP     846
0746:  PUSH    842
0748:  POP     848
....................  
....................    if (x < 0) 
074A:  MOV     840,W0
074C:  MOV     842,W1
074E:  MOV     #0,W2
0750:  MOV     #0,W3
0752:  CALL    508
0756:  BRA     NC,75C
....................    { 
....................       s = 1; 
0758:  BSET.B  845.0
....................       y = -y; 
075A:  BTG.B   849.7
....................    } 
....................  
....................    if (y <= 32768.0) 
075C:  MOV     846,W0
075E:  MOV     848,W1
0760:  MOV     #0,W2
0762:  MOV     #4700,W3
0764:  CALL    508
0768:  BRA     C,76C
076A:  BRA     NZ,77E
....................   res = (float32)(unsigned int16)y; 
076C:  MOV     846,W0
076E:  MOV     848,W1
0770:  CALL    570
0774:  CALL    346
0778:  MOV     W0,84A
077A:  MOV     W1,84C
....................  
....................  else if (y < 10000000.0) 
077C:  BRA     810
077E:  MOV     846,W0
0780:  MOV     848,W1
0782:  MOV     #9680,W2
0784:  MOV     #4B18,W3
0786:  CALL    508
078A:  BRA     NC,808
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
078C:  MOV     846,W0
078E:  MOV     848,W1
0790:  MOV     #0,W2
0792:  MOV     #4700,W3
0794:  CALL    380
0798:  CALL    570
079C:  MOV     W0,84E
....................       y = 32768.0*(y/32768.0 - (float32)l); 
079E:  MOV     846,W0
07A0:  MOV     848,W1
07A2:  MOV     #0,W2
07A4:  MOV     #4700,W3
07A6:  CALL    380
07AA:  MOV     W0,W5
07AC:  MOV     W1,W6
07AE:  MOV     84E,W0
07B0:  CALL    346
07B4:  BSET.B  43.0
07B6:  MOV     W0,W2
07B8:  MOV     W1,W3
07BA:  MOV     W5,W0
07BC:  MOV     W6,W1
07BE:  CALL    59C
07C2:  MOV     W0,W2
07C4:  MOV     W1,W3
07C6:  MOV     #0,W0
07C8:  MOV     #4700,W1
07CA:  CALL    44A
07CE:  MOV     W0,846
07D0:  MOV     W1,848
....................   res = 32768.0*(float32)l; 
07D2:  MOV     84E,W0
07D4:  CALL    346
07D8:  MOV     W0,W2
07DA:  MOV     W1,W3
07DC:  MOV     #0,W0
07DE:  MOV     #4700,W1
07E0:  CALL    44A
07E4:  MOV     W0,84A
07E6:  MOV     W1,84C
....................   res += (float32)(unsigned int16)y; 
07E8:  MOV     846,W0
07EA:  MOV     848,W1
07EC:  CALL    570
07F0:  CALL    346
07F4:  BCLR.B  43.0
07F6:  MOV     W0,W2
07F8:  MOV     W1,W3
07FA:  MOV     84A,W0
07FC:  MOV     84C,W1
07FE:  CALL    59C
0802:  MOV     W0,84A
0804:  MOV     W1,84C
....................  } 
....................  
....................  else 
0806:  BRA     810
....................   res = y; 
0808:  PUSH    846
080A:  POP     84A
080C:  PUSH    848
080E:  POP     84C
....................  
....................  y = y - (float32)(unsigned int16)y; 
0810:  MOV     846,W0
0812:  MOV     848,W1
0814:  CALL    570
0818:  CALL    346
081C:  BSET.B  43.0
081E:  MOV     W0,W2
0820:  MOV     W1,W3
0822:  MOV     846,W0
0824:  MOV     848,W1
0826:  CALL    59C
082A:  MOV     W0,846
082C:  MOV     W1,848
....................  
....................  if (s) 
082E:  BTSS.B  845.0
0830:  BRA     834
....................   res = -res; 
0832:  BTG.B   84D.7
....................  
....................  if (y != 0) 
0834:  MOV     846,W0
0836:  MOV     848,W1
0838:  MOV     #0,W2
083A:  MOV     #0,W3
083C:  CALL    508
0840:  BRA     Z,878
....................  { 
....................   if (s == 1 && n == 0) 
0842:  BTSS.B  845.0
0844:  BRA     85C
0846:  CP0.B   844
0848:  BRA     NZ,85C
....................    res -= 1.0; 
084A:  BSET.B  43.0
084C:  MOV     84A,W0
084E:  MOV     84C,W1
0850:  MOV     #0,W2
0852:  MOV     #3F80,W3
0854:  CALL    59C
0858:  MOV     W0,84A
085A:  MOV     W1,84C
....................  
....................   if (s == 0 && n == 1) 
085C:  BTSC.B  845.0
085E:  BRA     878
0860:  MOV     844,W4
0862:  CP.B    W4L,#1
0864:  BRA     NZ,878
....................    res += 1.0; 
0866:  BCLR.B  43.0
0868:  MOV     84A,W0
086A:  MOV     84C,W1
086C:  MOV     #0,W2
086E:  MOV     #3F80,W3
0870:  CALL    59C
0874:  MOV     W0,84A
0876:  MOV     W1,84C
....................  } 
....................  if (x == 0) 
0878:  MOV     840,W0
087A:  MOV     842,W1
087C:  MOV     #0,W2
087E:  MOV     #0,W3
0880:  CALL    508
0884:  BRA     NZ,88A
....................     res = 0; 
0886:  CLR     84A
0888:  CLR     84C
....................  
....................  return (res); 
088A:  MOV     84A,W0
088C:  MOV     84C,W1
.................... } 
088E:  MOV     [--W15],W6
0890:  MOV     [--W15],W5
0892:  RETURN  
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
*
0DD8:  MOV     W5,[W15++]
0DDA:  MOV     W6,[W15++]
0DDC:  MOV     W7,[W15++]
0DDE:  MOV     W8,[W15++]
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
0DE0:  BCLR.B  855.0
....................    y = x; 
0DE2:  PUSH    84C
0DE4:  POP     856
0DE6:  PUSH    84E
0DE8:  POP     858
0DEA:  PUSH    850
0DEC:  POP     85A
0DEE:  PUSH    852
0DF0:  POP     85C
....................  
....................    if (x < 0) 
0DF2:  MOV     84C,W0
0DF4:  MOV     84E,W1
0DF6:  MOV     850,W2
0DF8:  MOV     852,W3
0DFA:  MOV     #0,W4
0DFC:  MOV     #0,W5
0DFE:  MOV     #0,W6
0E00:  MOV     #0,W7
0E02:  CALL    A1A
0E06:  BRA     NC,E0C
....................    { 
....................       s = 1; 
0E08:  BSET.B  855.0
....................       y = -y; 
0E0A:  BTG.B   85D.7
....................    } 
....................  
....................    if (y <= 32768.0) 
0E0C:  MOV     856,W0
0E0E:  MOV     858,W1
0E10:  MOV     85A,W2
0E12:  MOV     85C,W3
0E14:  MOV     #0,W4
0E16:  MOV     #0,W5
0E18:  MOV     #0,W6
0E1A:  MOV     #40E0,W7
0E1C:  CALL    A1A
0E20:  BRA     C,E24
0E22:  BRA     NZ,E44
....................   res = (float64)(unsigned int16)y; 
0E24:  MOV     856,W0
0E26:  MOV     858,W1
0E28:  MOV     85A,W2
0E2A:  MOV     85C,W3
0E2C:  CALL    A9E
0E30:  MOV     #0,W1
0E32:  MOV     #0,W2
0E34:  MOV     #0,W3
0E36:  CALL    8A8
0E3A:  MOV     W0,85E
0E3C:  MOV     W1,860
0E3E:  MOV     W2,862
0E40:  MOV     W3,864
....................  
....................  else if (y < 10000000.0) 
0E42:  BRA     F48
0E44:  MOV     856,W0
0E46:  MOV     858,W1
0E48:  MOV     85A,W2
0E4A:  MOV     85C,W3
0E4C:  MOV     #0,W4
0E4E:  MOV     #0,W5
0E50:  MOV     #12D0,W6
0E52:  MOV     #4163,W7
0E54:  CALL    A1A
0E58:  BRA     NC,F38
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
0E5A:  MOV     856,W0
0E5C:  MOV     858,W1
0E5E:  MOV     85A,W2
0E60:  MOV     85C,W3
0E62:  MOV     #0,W4
0E64:  MOV     #0,W5
0E66:  MOV     #0,W6
0E68:  MOV     #40E0,W7
0E6A:  CALL    AF4
0E6E:  CALL    A9E
0E72:  MOV     W0,866
....................       y = 32768.0*(y/32768.0 - (float64)l); 
0E74:  MOV     856,W0
0E76:  MOV     858,W1
0E78:  MOV     85A,W2
0E7A:  MOV     85C,W3
0E7C:  MOV     #0,W4
0E7E:  MOV     #0,W5
0E80:  MOV     #0,W6
0E82:  MOV     #40E0,W7
0E84:  CALL    AF4
0E88:  MOV     W0,W5
0E8A:  MOV     W1,W6
0E8C:  MOV     W2,W7
0E8E:  MOV     W3,W8
0E90:  MOV     866,W0
0E92:  MOV     #0,W1
0E94:  MOV     #0,W2
0E96:  MOV     #0,W3
0E98:  CALL    8A8
0E9C:  BSET.B  43.0
0E9E:  MOV     W5,[W15++]
0EA0:  MOV     W6,[W15++]
0EA2:  MOV     W7,[W15++]
0EA4:  MOV     W0,W4
0EA6:  MOV     W5,W0
0EA8:  MOV     W1,W5
0EAA:  MOV     W6,W1
0EAC:  MOV     W2,W6
0EAE:  MOV     W7,W2
0EB0:  MOV     W3,W7
0EB2:  MOV     W8,W3
0EB4:  CALL    BFC
0EB8:  MOV     [--W15],W7
0EBA:  MOV     [--W15],W6
0EBC:  MOV     [--W15],W5
0EBE:  MOV     W0,W4
0EC0:  MOV     W1,W5
0EC2:  MOV     W2,W6
0EC4:  MOV     W3,W7
0EC6:  MOV     #0,W0
0EC8:  MOV     #0,W1
0ECA:  MOV     #0,W2
0ECC:  MOV     #40E0,W3
0ECE:  CALL    90C
0ED2:  MOV     W0,856
0ED4:  MOV     W1,858
0ED6:  MOV     W2,85A
0ED8:  MOV     W3,85C
....................   res = 32768.0*(float64)l; 
0EDA:  MOV     866,W0
0EDC:  MOV     #0,W1
0EDE:  MOV     #0,W2
0EE0:  MOV     #0,W3
0EE2:  CALL    8A8
0EE6:  MOV     W0,W4
0EE8:  MOV     W1,W5
0EEA:  MOV     W2,W6
0EEC:  MOV     W3,W7
0EEE:  MOV     #0,W0
0EF0:  MOV     #0,W1
0EF2:  MOV     #0,W2
0EF4:  MOV     #40E0,W3
0EF6:  CALL    90C
0EFA:  MOV     W0,85E
0EFC:  MOV     W1,860
0EFE:  MOV     W2,862
0F00:  MOV     W3,864
....................   res += (float64)(unsigned int16)y; 
0F02:  MOV     856,W0
0F04:  MOV     858,W1
0F06:  MOV     85A,W2
0F08:  MOV     85C,W3
0F0A:  CALL    A9E
0F0E:  MOV     #0,W1
0F10:  MOV     #0,W2
0F12:  MOV     #0,W3
0F14:  CALL    8A8
0F18:  BCLR.B  43.0
0F1A:  MOV     W0,W4
0F1C:  MOV     W1,W5
0F1E:  MOV     W2,W6
0F20:  MOV     W3,W7
0F22:  MOV     85E,W0
0F24:  MOV     860,W1
0F26:  MOV     862,W2
0F28:  MOV     864,W3
0F2A:  CALL    BFC
0F2E:  MOV     W0,85E
0F30:  MOV     W1,860
0F32:  MOV     W2,862
0F34:  MOV     W3,864
....................  } 
....................  
....................  else 
0F36:  BRA     F48
....................   res = y; 
0F38:  PUSH    856
0F3A:  POP     85E
0F3C:  PUSH    858
0F3E:  POP     860
0F40:  PUSH    85A
0F42:  POP     862
0F44:  PUSH    85C
0F46:  POP     864
....................  
....................  y = y - (float64)(unsigned int16)y; 
0F48:  MOV     856,W0
0F4A:  MOV     858,W1
0F4C:  MOV     85A,W2
0F4E:  MOV     85C,W3
0F50:  CALL    A9E
0F54:  MOV     #0,W1
0F56:  MOV     #0,W2
0F58:  MOV     #0,W3
0F5A:  CALL    8A8
0F5E:  BSET.B  43.0
0F60:  MOV     W0,W4
0F62:  MOV     W1,W5
0F64:  MOV     W2,W6
0F66:  MOV     W3,W7
0F68:  MOV     856,W0
0F6A:  MOV     858,W1
0F6C:  MOV     85A,W2
0F6E:  MOV     85C,W3
0F70:  CALL    BFC
0F74:  MOV     W0,856
0F76:  MOV     W1,858
0F78:  MOV     W2,85A
0F7A:  MOV     W3,85C
....................  
....................  if (s) 
0F7C:  BTSS.B  855.0
0F7E:  BRA     F82
....................   res = -res; 
0F80:  BTG.B   865.7
....................  
....................  if (y != 0) 
0F82:  MOV     856,W0
0F84:  MOV     858,W1
0F86:  MOV     85A,W2
0F88:  MOV     85C,W3
0F8A:  MOV     #0,W4
0F8C:  MOV     #0,W5
0F8E:  MOV     #0,W6
0F90:  MOV     #0,W7
0F92:  CALL    A1A
0F96:  BRA     Z,FE6
....................  { 
....................   if (s == 1 && n == 0) 
0F98:  BTSS.B  855.0
0F9A:  BRA     FBE
0F9C:  CP0.B   854
0F9E:  BRA     NZ,FBE
....................    res -= 1.0; 
0FA0:  BSET.B  43.0
0FA2:  MOV     85E,W0
0FA4:  MOV     860,W1
0FA6:  MOV     862,W2
0FA8:  MOV     864,W3
0FAA:  MOV     #0,W4
0FAC:  MOV     #0,W5
0FAE:  MOV     #0,W6
0FB0:  MOV     #3FF0,W7
0FB2:  CALL    BFC
0FB6:  MOV     W0,85E
0FB8:  MOV     W1,860
0FBA:  MOV     W2,862
0FBC:  MOV     W3,864
....................  
....................   if (s == 0 && n == 1) 
0FBE:  BTSC.B  855.0
0FC0:  BRA     FE6
0FC2:  MOV     854,W4
0FC4:  CP.B    W4L,#1
0FC6:  BRA     NZ,FE6
....................    res += 1.0; 
0FC8:  BCLR.B  43.0
0FCA:  MOV     85E,W0
0FCC:  MOV     860,W1
0FCE:  MOV     862,W2
0FD0:  MOV     864,W3
0FD2:  MOV     #0,W4
0FD4:  MOV     #0,W5
0FD6:  MOV     #0,W6
0FD8:  MOV     #3FF0,W7
0FDA:  CALL    BFC
0FDE:  MOV     W0,85E
0FE0:  MOV     W1,860
0FE2:  MOV     W2,862
0FE4:  MOV     W3,864
....................  } 
....................  if (x == 0) 
0FE6:  MOV     84C,W0
0FE8:  MOV     84E,W1
0FEA:  MOV     850,W2
0FEC:  MOV     852,W3
0FEE:  MOV     #0,W4
0FF0:  MOV     #0,W5
0FF2:  MOV     #0,W6
0FF4:  MOV     #0,W7
0FF6:  CALL    A1A
0FFA:  BRA     NZ,1004
....................     res = 0; 
0FFC:  CLR     85E
0FFE:  CLR     860
1000:  CLR     862
1002:  CLR     864
....................  
....................  return (res); 
1004:  MOV     85E,W0
1006:  MOV     860,W1
1008:  MOV     862,W2
100A:  MOV     864,W3
.................... } 
100C:  MOV     [--W15],W8
100E:  MOV     [--W15],W7
1010:  MOV     [--W15],W6
1012:  MOV     [--W15],W5
1014:  RETURN  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
*
1030:  CLR.B   844
1032:  PUSH    838
1034:  POP     840
1036:  PUSH    83A
1038:  POP     842
103A:  CALL    73C
103E:  MOV.D   W0,W0
.................... } 
1040:  RETURN  
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
0894:  MOV.B   #1,W0L
0896:  MOV.B   W0L,844
0898:  PUSH    838
089A:  POP     840
089C:  PUSH    83A
089E:  POP     842
08A0:  CALL    73C
08A4:  MOV.D   W0,W0
.................... } 
08A6:  RETURN  
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
1016:  MOV.B   #1,W0L
1018:  MOV.B   W0L,854
101A:  PUSH    83C
101C:  POP     84C
101E:  PUSH    83E
1020:  POP     84E
1022:  PUSH    840
1024:  POP     850
1026:  PUSH    842
1028:  POP     852
102A:  CALL    DD8
.................... } 
102E:  RETURN  
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES FRC_PLL16             	//Internal Fast RC oscillator with 16X PLL 
.................... #FUSES NOCKSFSM              	//Clock Switching is disabled, fail Safe clock monitor is disabled 
.................... //#FUSES NOPUT                 	//No Power Up Timer 
.................... //#FUSES BORV27						// 
.................... //#FUSES BROWNOUT					//brownout reset 
....................  
.................... #FUSES PUT64                 	//No Power Up Timer PUT64  
.................... #FUSES BORV42						//42 
.................... #FUSES BROWNOUT					//brownout reset 
....................  
....................  
....................  
.................... #use delay(clock=117920000) //7.37Mhz x16 
.................... //#use fixed_IO(E_outputs = PIN_E0,PIN_E0,PIN_E1,PIN_E1,PIN_E2,PIN_E2) 
....................  
.................... #use fast_io(B) 
.................... #use fast_io(C) 
.................... #use fast_io(D) 
.................... #use fast_io(E) 
.................... #use fast_io(F) 
....................  
.................... //#define Debug_serial 1 
.................... #ifdef Debug_serial 
.................... 	#use rs232(baud=9600,uart1,stream=PICkit,parity=N,bits=8) 
.................... #endif 
....................  
.................... const unsigned  int8  sen[ 45] = {128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146}; 
.................... //const unsigned  int8  sen[ 36] = {128,106,85,65,46,31,18,9,3,1,3,9,18,31,46,65,85,106,128,150,171,191,210,225,238,247,253,255,253,247,238,225,210,191,171,150}; 
.................... const  unsigned int8  esp[135] = {128,122,117,111,105,98,89,81,72,62,53,43,34,25,18,11,6,3,1,1,3,6,10,16,23,31,40,48,57,65,73,81,88,94,99,104,108,111,114,116,118,119,120,121,122,122,123,123,123,123,123,123,124,124,124,124,124,124,125,125,125,125,126,126,126,127,127,127,128,128,129,129,129,129,130,130,130,130,131,131,131,131,131,131,132,132,132,132,132,133,133,133,134,135,136,137,139,142,144,148,152,157,163,169,176,184,192,200,209,217,226,233,240,246,250,253,254,254,251,247,242,235,227,219,210,200,190,181,172,163,156,148,142,136,132}; 
.................... //const  unsigned int8  esp[108] = {128,121,114,107,98,87,76,65,53,41,30,20,11,5,2,1,3,7,13,22,31,42,53,63,73,83,91,98,104,109,113,116,118,120,121,122,122,123,123,123,123,123,124,124,124,124,125,125,125,125,126,126,127,127,128,128,129,129,129,130,130,130,131,131,131,131,131,132,132,132,132,132,133,134,134,136,137,140,143,147,152,158,166,174,184,194,205,215,226,235,243,249,253,254,253,249,242,233,223,212,200,188,176,166,156,147,139,133}; 
.................... static unsigned int8  s_n; 
*
105A:  CLR.B   800
.................... static unsigned int8  e_n; 
105C:  CLR.B   801
.................... static unsigned int8 sen_n; 
105E:  CLR.B   802
.................... unsigned int8 num_sen = 57;//57 
....................  
.................... static unsigned int16 tmr2_m; 
1060:  CLR     804
.................... static unsigned int16 tmr2_n; 
1062:  CLR     806
.................... static unsigned int16 tmr2_width; 
1064:  CLR     808
.................... static unsigned int16 tmr2_frecu; 
1066:  CLR     80A
.................... static unsigned int8  f_150; 
1068:  CLR.B   80C
....................  
.................... static unsigned int32 adc_sum; 
106A:  CLR     80E
106C:  CLR     810
.................... static unsigned int16 adc_i; 
106E:  CLR     812
.................... static unsigned int8  adc; 
1070:  CLR.B   80D
.................... static unsigned int16 adc_val[2]; 
1072:  CLR     814
1074:  CLR     816
.................... static float          adc_vol[2]; 
1076:  CLR     818
1078:  CLR     81A
107A:  CLR     81C
107C:  CLR     81E
.................... static float          adc_sen[2]; 
107E:  CLR     820
1080:  CLR     822
1082:  CLR     824
1084:  CLR     826
....................  
.................... static unsigned int8 data; 
1086:  CLR.B   828
.................... static float value; 
1088:  CLR     82A
108A:  CLR     82C
.................... static float max; 
108C:  CLR     82E
108E:  CLR     830
....................  
.................... #include <interrupt.c> 
.................... #int_TIMER1 
.................... void  TIMER1_isr(void) { //sin + desfase 
*
01B0:  PUSH    42
01B2:  PUSH    36
01B4:  MOV     W0,[W15++]
01B6:  MOV     #2,W0
01B8:  REPEAT  #C
01BA:  MOV     [W0++],[W15++]
.................... 	if(sen_n<num_sen) { 
01BC:  MOV.B   802,W0L
01BE:  MOV     802,W4
01C0:  LSR     W4,#8,W4
01C2:  CP.B    W4L,W0L
01C4:  BRA     LEU,242
....................       if(s_n<45) { 
01C6:  MOV     800,W4
01C8:  MOV     #2D,W3
01CA:  CP.B    W3L,W4L
01CC:  BRA     LEU,1F6
....................          output_e((input_e()&0b100000000)|sen[s_n]); //OUTPUT_B(~input_b()); 
01CE:  MOV     2DA,W5
01D0:  AND     #100,W5
01D2:  MOV.B   800,W0L
01D4:  CLR.B   1
01D6:  CALL    100
01DA:  IOR      W5,  W0,W5
01DC:  MOV     W5,2DC
....................          output_f((sen[s_n]>>6));//||(input_f()&&0b11111100)); 
01DE:  MOV.B   800,W0L
01E0:  CLR.B   1
01E2:  CALL    100
01E6:  CLR.B   1
01E8:  LSR     W0,#6,W5
01EA:  PUSH    2E2
01EC:  MOV.B   W5L,[W15-#2]
01EE:  POP     2E2
01F0:  CLR.B   2E3
....................          s_n++; 
01F2:  INC.B   0800
....................       } 
....................       else { 
01F4:  BRA     1FA
....................          s_n=0; 
01F6:  CLR.B   800
....................          sen_n++; 
01F8:  INC.B   0802
....................       } 
....................       if(sen_n==30&&s_n==33) 
01FA:  MOV     802,W4
01FC:  CP.B    W4L,#1E
01FE:  BRA     NZ,20A
0200:  MOV     800,W4
0202:  XOR.B   #21,W4L
0204:  BRA     NZ,20A
....................       	output_toggle(PIN_C15);//sincro   CMP                                       
0206:  BTG.B   2D1.7
....................       else if((sen_n==10&&s_n==22)||(sen_n==38&&s_n==22)) 
0208:  BRA     240
020A:  MOV     802,W4
020C:  CP.B    W4L,#A
020E:  BRA     NZ,216
0210:  MOV     800,W4
0212:  CP.B    W4L,#16
0214:  BRA     Z,222
0216:  MOV     802,W4
0218:  XOR.B   #26,W4L
021A:  BRA     NZ,226
021C:  MOV     800,W4
021E:  CP.B    W4L,#16
0220:  BRA     NZ,226
....................       	output_high(PIN_C13);//Ks E8 
0222:  BSET.B  2D1.5
....................       else if((sen_n==10&&s_n==44)||(sen_n==38&&s_n==44)) 
0224:  BRA     240
0226:  MOV     802,W4
0228:  CP.B    W4L,#A
022A:  BRA     NZ,232
022C:  MOV     800,W4
022E:  XOR.B   #2C,W4L
0230:  BRA     Z,23E
0232:  MOV     802,W4
0234:  XOR.B   #26,W4L
0236:  BRA     NZ,240
0238:  MOV     800,W4
023A:  XOR.B   #2C,W4L
023C:  BRA     NZ,240
....................       	output_low(PIN_C13);//Ks E8 
023E:  BCLR.B  2D1.5
....................    } 
....................    else { 
0240:  BRA     278
....................       if(e_n<135) {  
0242:  MOV     800,W4
0244:  LSR     W4,#8,W4
0246:  MOV     #87,W3
0248:  CP.B    W3L,W4L
024A:  BRA     LEU,274
....................          output_e((input_e()&0b100000000)|esp[e_n]); //OUTPUT_B(~input_b()); 
024C:  MOV     2DA,W5
024E:  AND     #100,W5
0250:  MOV.B   801,W0L
0252:  CLR.B   1
0254:  CALL    13A
0258:  IOR      W5,  W0,W5
025A:  MOV     W5,2DC
....................          output_f((esp[e_n]>>6));//||(input_f()&&0b11111100)); 
025C:  MOV.B   801,W0L
025E:  CLR.B   1
0260:  CALL    13A
0264:  CLR.B   1
0266:  LSR     W0,#6,W5
0268:  PUSH    2E2
026A:  MOV.B   W5L,[W15-#2]
026C:  POP     2E2
026E:  CLR.B   2E3
....................          e_n++; 
0270:  INC.B   0801
....................       } 
....................       else { 
0272:  BRA     278
....................          e_n=0; 
0274:  CLR.B   801
....................          sen_n=0; 
0276:  CLR.B   802
....................       } 
....................    } 
.................... } 
....................  
0278:  BCLR.B  84.3
027A:  MOV     #1A,W0
027C:  REPEAT  #C
027E:  MOV     [--W15],[W0--]
0280:  MOV     [--W15],W0
0282:  POP     36
0284:  POP     42
0286:  RETFIE  
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) {	//1hz   Oxigeno                               
0288:  PUSH    42
028A:  PUSH    36
028C:  MOV     W0,[W15++]
028E:  MOV     #2,W0
0290:  REPEAT  #C
0292:  MOV     [W0++],[W15++]
.................... 	if  (tmr2_m<=20750) output_high(PIN_E8);//C13 
0294:  MOV     804,W4
0296:  MOV     #510E,W3
0298:  CP      W3,W4
029A:  BRA     NC,2A0
029C:  BSET.B  2DD.0
....................    else output_low(PIN_E8);//C13 
029E:  BRA     2A2
02A0:  BCLR.B  2DD.0
....................  
....................    tmr2_m++; 
02A2:  INC     0804
....................    if(tmr2_m>=41500) tmr2_m=0; 
02A4:  MOV     804,W4
02A6:  MOV     #A21C,W3
02A8:  CP      W3,W4
02AA:  BRA     GTU,2AE
02AC:  CLR     804
....................     
....................    //1 - 150 Hz Vss 
.................... 	if  (tmr2_n<=tmr2_width) output_high(PIN_C14); 
02AE:  MOV     806,W0
02B0:  MOV     808,W4
02B2:  CP      W4,W0
02B4:  BRA     NC,2BA
02B6:  BSET.B  2D1.6
....................    else output_low(PIN_C14); 
02B8:  BRA     2BC
02BA:  BCLR.B  2D1.6
....................  
....................    tmr2_n++; 
02BC:  INC     0806
....................    if(tmr2_n>=tmr2_frecu) tmr2_n=0; 
02BE:  MOV     80A,W0
02C0:  MOV     806,W4
02C2:  CP      W4,W0
02C4:  BRA     NC,2C8
02C6:  CLR     806
.................... } 
....................  
02C8:  BCLR.B  84.6
02CA:  MOV     #1A,W0
02CC:  REPEAT  #C
02CE:  MOV     [--W15],[W0--]
02D0:  MOV     [--W15],W0
02D2:  POP     36
02D4:  POP     42
02D6:  RETFIE  
.................... #int_ADC1 
.................... void  ADC1_isr(void) { 
02D8:  PUSH    42
02DA:  PUSH    36
02DC:  MOV     W0,[W15++]
02DE:  MOV     #2,W0
02E0:  REPEAT  #C
02E2:  MOV     [W0++],[W15++]
....................    adc_sum+=read_adc(ADC_READ_ONLY); 
02E4:  BTSS.B  2A0.0
02E6:  BRA     2E4
02E8:  MOV     280,W0
02EA:  ADD     80E
02EC:  MOV     #0,W0
02EE:  ADDC    810,W0
02F0:  MOV     W0,810
....................    adc_i++; 
02F2:  INC     0812
....................    if(adc_i>=512) { 
02F4:  MOV     812,W4
02F6:  MOV     #200,W3
02F8:  CP      W3,W4
02FA:  BRA     GTU,332
....................       adc_val[adc]=(int16)(adc_sum>>9); 
02FC:  MOV.B   80D,W0L
02FE:  CLR.B   1
0300:  SL      W0,#1,W0
0302:  MOV     #814,W4
0304:  ADD     W0,W4,W5
0306:  MOV     #9,W4
0308:  MOV     80E,W0
030A:  MOV     810,W1
030C:  INC     W4,W4
030E:  DEC     W4,W4
0310:  BRA     Z,318
0312:  LSR     W1,W1
0314:  RRC     W0,W0
0316:  BRA     30E
0318:  MOV     W0,[W5]
....................        
....................       adc_sum=0; 
031A:  CLR     80E
031C:  CLR     810
....................       adc_i=0; 
031E:  CLR     812
....................        
....................       adc++; 
0320:  INC.B   080D
....................       if(adc==2) adc=0; 
0322:  MOV     80C,W4
0324:  LSR     W4,#8,W4
0326:  CP.B    W4L,#2
0328:  BRA     NZ,32C
032A:  CLR.B   80D
....................       set_adc_channel(adc); 
032C:  MOV.B   80D,W0L
032E:  MOV.B   W0L,2A6
0330:  CLR.B   2A7
....................    } 
....................    read_adc(ADC_START_ONLY); 
0332:  BCLR.B  2A0.0
0334:  BSET.B  2A0.1
.................... } 
....................  
.................... #include <function.c> 
0336:  BCLR.B  85.3
0338:  MOV     #1A,W0
033A:  REPEAT  #C
033C:  MOV     [--W15],[W0--]
033E:  MOV     [--W15],W0
0340:  POP     36
0342:  POP     42
0344:  RETFIE  
.................... #inline 
.................... void start (void) { 
....................    setup_spi( FALSE ); 
*
1090:  BCLR.B  221.7
....................     
.................... 	setup_adc_ports(sAN0|sAN1,VSS_VDD ); 
1092:  MOV     #FFFC,W4
1094:  MOV     W4,2A8
1096:  CLR     2A2
.................... 	setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_16);//setup_adc(ADC_CLOCK_DIV_4|ADC_TAD_MUL_8); 
1098:  MOV     #100F,W4
109A:  MOV     W4,2A4
109C:  MOV     #80E0,W4
109E:  MOV     W4,2A0
.................... 	 
.................... 	setup_timer1(TMR_INTERNAL | TMR_DIV_BY_1, 1165); //sin 
10A0:  CLR     104
10A2:  MOV     #48D,W4
10A4:  MOV     W4,102
10A6:  MOV     #A000,W4
10A8:  MOV     W4,104
.................... 	setup_timer2(TMR_INTERNAL | TMR_DIV_BY_64, 10);//1hz   //1-150hz 
10AA:  CLR     110
10AC:  MOV     #A,W4
10AE:  MOV     W4,10C
10B0:  MOV     #A020,W4
10B2:  MOV     W4,110
.................... 	//setup_timer3(TMR_INTERNAL | TMR_DIV_BY_256, 56850);//1hz  
....................  
.................... 	set_tris_b(0b100001111);// B7-B4 4-lsb 
10B4:  MOV     #10F,W4
10B6:  MOV     W4,2C6
.................... 	set_tris_c(0b0001111111111111);//c15 sin_sincro  c14 1-150hz  c13 1hz 
10B8:  MOV     #1FFF,W4
10BA:  MOV     W4,2CC
.................... 	set_tris_d(0b11110000);// D4-D0 4-msb 
10BC:  MOV     #F0,W4
10BE:  MOV     W4,2D2
.................... 	set_tris_e(0b011000000);//E8 Oxi  E5-E0 6-lsb SIN 
10C0:  MOV     #C0,W4
10C2:  MOV     W4,2D8
.................... 	set_tris_f(0b11110100);// D4-D0 2-msb SIN 
10C4:  MOV     #F4,W4
10C6:  MOV     W4,2DE
.................... 	 
.................... 	enable_interrupts(INT_ADC1); 
10C8:  BSET.B  8D.3
.................... 	enable_interrupts(int_timer1); 
10CA:  BSET.B  8C.3
....................    enable_interrupts(int_timer2); 
10CC:  BSET.B  8C.6
.................... 	 
.................... 	set_adc_channel(adc); 
10CE:  MOV.B   80D,W0L
10D0:  MOV.B   W0L,2A6
10D2:  CLR.B   2A7
....................    read_adc(ADC_START_ONLY); 
10D4:  BCLR.B  2A0.0
10D6:  BSET.B  2A0.1
.................... } 
....................  
.................... #inline 
.................... void debug_PICkit(void) { 
.................... 	#ifdef Debug_serial 
.................... 		static unsigned  int8 option; 
....................       if(kbhit(PICkit)) { 
....................          option=fgetc(PICkit); 
....................          if(option=='1') 
....................             fprintf(PICkit,"ADC0 val:%4Lu vol:%1.3e sen:%1.3e\r\n",adc_val[0],adc_vol[0],adc_sen[0]); 
....................          else if(option=='2') 
....................             fprintf(PICkit,"ADC1 val:%4Lu vol:%1.3e sen:%1.3e\r\n",adc_val[1],adc_vol[1],adc_sen[1]); 
....................          else if(option=='d') 
....................             fprintf(PICkit,"value:%1.3e max:%1.3e data:%3u \r\n",value,max,data); 
....................          /*else if(option=='v') 
....................             fprintf(PICkit,"widt %5Lu \r\n",tmr2_width);*/ 
....................          } 
....................    #endif 
.................... } 
....................  
.................... #inline 
.................... void get_adc_val_sen(void) { 
....................    adc_vol[0]=(float)(adc_val[0]*5)/1024;//Tps 
10D8:  MOV     814,W4
10DA:  MUL.UU  W4,#5,W0
10DC:  CALL    346
10E0:  MOV     W0,W5
10E2:  MOV     W1,W6
10E4:  MOV     W5,W0
10E6:  MOV     W6,W1
10E8:  MOV     #0,W2
10EA:  MOV     #4480,W3
10EC:  CALL    380
10F0:  MOV     W0,818
10F2:  MOV     W1,81A
....................    adc_vol[1]=(float)(adc_val[1]*5)/1024;//Vss 
10F4:  MOV     816,W4
10F6:  MUL.UU  W4,#5,W0
10F8:  CALL    346
10FC:  MOV     W0,W5
10FE:  MOV     W1,W6
1100:  MOV     W5,W0
1102:  MOV     W6,W1
1104:  MOV     #0,W2
1106:  MOV     #4480,W3
1108:  CALL    380
110C:  MOV     W0,81C
110E:  MOV     W1,81E
....................     
....................    adc_sen[0]=adc_vol[0]; 
1110:  PUSH    818
1112:  POP     820
1114:  PUSH    81A
1116:  POP     822
....................    adc_sen[1]=adc_vol[1]; 
1118:  PUSH    81C
111A:  POP     824
111C:  PUSH    81E
111E:  POP     826
.................... } 
....................  
.................... #inline 
.................... void time_sin(void) { //500hz=1165   4khz=145   10bits 
....................       setup_timer1(TMR_INTERNAL | TMR_DIV_BY_1, (1165-(1023-adc_val[0]))); 
*
1168:  MOV     #3FF,W4
116A:  MOV     814,W3
116C:  SUB     W4,W3,W0
116E:  MOV     #48D,W4
1170:  SUB     W4,W0,W5
1172:  CLR     104
1174:  MOV     W5,102
1176:  MOV     #A000,W4
1178:  MOV     W4,104
.................... } 
....................  
.................... #inline 
.................... void time_150(void) { //1hz=41500   150hz=277   10bits 
....................       f_150=(1+ceil(0.190*adc_val[1])); 
117A:  MOV     816,W0
117C:  MOV     #0,W1
117E:  MOV     #0,W2
1180:  MOV     #0,W3
1182:  CALL    8A8
1186:  MOV     W0,W4
1188:  MOV     W1,W5
118A:  MOV     W2,W6
118C:  MOV     W3,W7
118E:  MOV     #B852,W0
1190:  MOV     #851E,W1
1192:  MOV     #51EB,W2
1194:  MOV     #3FC8,W3
1196:  CALL    90C
119A:  MOV     W0,W5
119C:  MOV     W1,W6
119E:  MOV     W2,W7
11A0:  MOV     W3,W8
11A2:  MOV     W5,83C
11A4:  MOV     W6,83E
11A6:  MOV     W7,840
11A8:  MOV     W8,842
11AA:  CALL    1016
11AE:  BCLR.B  43.0
11B0:  MOV     W0,W4
11B2:  MOV     W1,W5
11B4:  MOV     W2,W6
11B6:  MOV     W3,W7
11B8:  MOV     #0,W0
11BA:  MOV     #0,W1
11BC:  MOV     #0,W2
11BE:  MOV     #3FF0,W3
11C0:  CALL    BFC
11C4:  CALL    A9E
11C8:  MOV.B   W0L,80C
....................       tmr2_frecu=floor(41500/f_150); 
11CA:  MOV     #A21C,W4
11CC:  MOV     80C,W3
11CE:  CLR.B   7
11D0:  REPEAT  #11
11D2:  DIV.U   W4,W3
11D4:  CALL    346
11D8:  MOV     W0,W5
11DA:  MOV     W1,W6
11DC:  MOV     W5,838
11DE:  MOV     W6,83A
11E0:  CALL    1030
11E4:  CALL    570
11E8:  MOV     W0,80A
....................       tmr2_width=ceil(tmr2_frecu/2); 
11EA:  MOV     80A,W0
11EC:  LSR     W0,#1,W0
11EE:  CALL    346
11F2:  MOV     W0,W5
11F4:  MOV     W1,W6
11F6:  MOV     W5,838
11F8:  MOV     W6,83A
11FA:  CALL    894
11FE:  CALL    570
1202:  MOV     W0,808
.................... } 
....................  
.................... #inline 
.................... void dac8(void) { //500hz=1165   4khz=145   10bits 
.................... 	max=5; 
*
1120:  CLR     82E
1122:  MOV     #40A0,W4
1124:  MOV     W4,830
.................... 	value=adc_vol[0]; 
1126:  PUSH    818
1128:  POP     82A
112A:  PUSH    81A
112C:  POP     82C
.................... 	 
.................... 	data=ceil((value*255)/max); 
112E:  MOV     82A,W0
1130:  MOV     82C,W1
1132:  MOV     #0,W2
1134:  MOV     #437F,W3
1136:  CALL    44A
113A:  MOV     W0,W5
113C:  MOV     W1,W6
113E:  MOV     W5,W0
1140:  MOV     W6,W1
1142:  MOV     82E,W2
1144:  MOV     830,W3
1146:  CALL    380
114A:  MOV     W0,W5
114C:  MOV     W1,W6
114E:  MOV     W5,838
1150:  MOV     W6,83A
1152:  CALL    894
1156:  CALL    570
115A:  MOV.B   W0L,828
....................  
.................... 	output_d(data); //OUTPUT_B(~input_b()); 
115C:  MOV.B   828,W0L
115E:  MOV.B   W0L,2D6
1160:  CLR.B   2D7
.................... 	output_b(data);//||(input_f()&&0b11111100)); 
1162:  MOV.B   828,W0L
1164:  MOV.B   W0L,2CA
1166:  CLR.B   2CB
.................... } 
....................  
....................  
....................  
....................  
.................... void main() 
.................... { 
*
1042:  MOV     #4444,W0
1044:  MOV     W0,94
1046:  MOV     #4444,W0
1048:  MOV     W0,98
104A:  BSET.B  81.7
104C:  MOV.B   #39,W0L
104E:  MOV.B   W0L,803
1050:  SETM    2A8
1052:  MOV     #F80,W15
1054:  MOV     #FFF,W0
1056:  MOV     W0,20
1058:  NOP     
.................... 	start(); 
.................... 	while(true) { 
.................... 		get_adc_val_sen(); 
.................... 		 
.................... 		dac8(); 
.................... 		 
.................... 		time_sin();//500-4Khz 
.................... 		 
.................... 		time_150();//0-150Hz 
.................... 		 
.................... 		debug_PICkit(); 
.................... 	} 
*
1204:  BRA     10D8
.................... } 
1206:  PWRSAV  #0

Configuration Fuses:
   Word  1L: C303   PR NOCKSFSM FRC_PLL16
          H: 0000  
   Word  2L: 003F   NOWDT WPSB16 WPSA512
          H: 0000  
   Word  3L: 8793   PUT64 BROWNOUT BORV42 LPOL_HIGH HPOL_HIGH NOPWMPIN MCLR
          H: 0000  
   Word  4L: 310F  
          H: 0000  
   Word  5L: 330F  
          H: 0000  
   Word  6L: 0007   NOPROTECT NOWRT
          H: 0000  
   Word  7L: C003   NODEBUG NOCOE ICSP1
          H: 0000  
