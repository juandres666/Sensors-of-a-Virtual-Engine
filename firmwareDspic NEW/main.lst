CCS PCD C Compiler, Version 4.104, 48421               16-May-13 19:40

               Filename: C:\Users\Juan Andres\SkyDrive\Documentos\Projects\Tesis Mora Niola ECU Test\firmwareDspic NEW\main.lst

               ROM used: 6324 bytes (19%)
                         Largest free fragment is 26444
               RAM used: 180 (9%) at main() level
                         259 (13%) worst case
               Stack:    5 worst case (3 in main + 2 for interrupts)

*
0000:  GOTO    164E
*
001A:  DATA    24,08,00
*
0020:  DATA    9A,08,00
*
002A:  DATA    EA,08,00
.................... #include <main.h> 
.................... #include <30F4011.h> 
.................... //////// Standard Header file for the DSPIC30F4011 device //////////////// 
.................... #device DSPIC30F4011 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #INCLUDE <MATH.H> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
*
0D48:  MOV     W5,[W15++]
0D4A:  MOV     W6,[W15++]
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
0D4C:  BCLR.B  83F.0
....................    y = x; 
0D4E:  PUSH    83A
0D50:  POP     840
0D52:  PUSH    83C
0D54:  POP     842
....................  
....................    if (x < 0) 
0D56:  MOV     83A,W0
0D58:  MOV     83C,W1
0D5A:  MOV     #0,W2
0D5C:  MOV     #0,W3
0D5E:  CALL    BEA
0D62:  BRA     NC,D68
....................    { 
....................       s = 1; 
0D64:  BSET.B  83F.0
....................       y = -y; 
0D66:  BTG.B   843.7
....................    } 
....................  
....................    if (y <= 32768.0) 
0D68:  MOV     840,W0
0D6A:  MOV     842,W1
0D6C:  MOV     #0,W2
0D6E:  MOV     #4700,W3
0D70:  CALL    BEA
0D74:  BRA     C,D78
0D76:  BRA     NZ,D8A
....................   res = (float32)(unsigned int16)y; 
0D78:  MOV     840,W0
0D7A:  MOV     842,W1
0D7C:  CALL    C52
0D80:  CALL    952
0D84:  MOV     W0,844
0D86:  MOV     W1,846
....................  
....................  else if (y < 10000000.0) 
0D88:  BRA     E1C
0D8A:  MOV     840,W0
0D8C:  MOV     842,W1
0D8E:  MOV     #9680,W2
0D90:  MOV     #4B18,W3
0D92:  CALL    BEA
0D96:  BRA     NC,E14
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
0D98:  MOV     840,W0
0D9A:  MOV     842,W1
0D9C:  MOV     #0,W2
0D9E:  MOV     #4700,W3
0DA0:  CALL    C7E
0DA4:  CALL    C52
0DA8:  MOV     W0,848
....................       y = 32768.0*(y/32768.0 - (float32)l); 
0DAA:  MOV     840,W0
0DAC:  MOV     842,W1
0DAE:  MOV     #0,W2
0DB0:  MOV     #4700,W3
0DB2:  CALL    C7E
0DB6:  MOV     W0,W5
0DB8:  MOV     W1,W6
0DBA:  MOV     848,W0
0DBC:  CALL    952
0DC0:  BSET.B  43.0
0DC2:  MOV     W0,W2
0DC4:  MOV     W1,W3
0DC6:  MOV     W5,W0
0DC8:  MOV     W6,W1
0DCA:  CALL    A4A
0DCE:  MOV     W0,W2
0DD0:  MOV     W1,W3
0DD2:  MOV     #0,W0
0DD4:  MOV     #4700,W1
0DD6:  CALL    98C
0DDA:  MOV     W0,840
0DDC:  MOV     W1,842
....................   res = 32768.0*(float32)l; 
0DDE:  MOV     848,W0
0DE0:  CALL    952
0DE4:  MOV     W0,W2
0DE6:  MOV     W1,W3
0DE8:  MOV     #0,W0
0DEA:  MOV     #4700,W1
0DEC:  CALL    98C
0DF0:  MOV     W0,844
0DF2:  MOV     W1,846
....................   res += (float32)(unsigned int16)y; 
0DF4:  MOV     840,W0
0DF6:  MOV     842,W1
0DF8:  CALL    C52
0DFC:  CALL    952
0E00:  BCLR.B  43.0
0E02:  MOV     W0,W2
0E04:  MOV     W1,W3
0E06:  MOV     844,W0
0E08:  MOV     846,W1
0E0A:  CALL    A4A
0E0E:  MOV     W0,844
0E10:  MOV     W1,846
....................  } 
....................  
....................  else 
0E12:  BRA     E1C
....................   res = y; 
0E14:  PUSH    840
0E16:  POP     844
0E18:  PUSH    842
0E1A:  POP     846
....................  
....................  y = y - (float32)(unsigned int16)y; 
0E1C:  MOV     840,W0
0E1E:  MOV     842,W1
0E20:  CALL    C52
0E24:  CALL    952
0E28:  BSET.B  43.0
0E2A:  MOV     W0,W2
0E2C:  MOV     W1,W3
0E2E:  MOV     840,W0
0E30:  MOV     842,W1
0E32:  CALL    A4A
0E36:  MOV     W0,840
0E38:  MOV     W1,842
....................  
....................  if (s) 
0E3A:  BTSS.B  83F.0
0E3C:  BRA     E40
....................   res = -res; 
0E3E:  BTG.B   847.7
....................  
....................  if (y != 0) 
0E40:  MOV     840,W0
0E42:  MOV     842,W1
0E44:  MOV     #0,W2
0E46:  MOV     #0,W3
0E48:  CALL    BEA
0E4C:  BRA     Z,E84
....................  { 
....................   if (s == 1 && n == 0) 
0E4E:  BTSS.B  83F.0
0E50:  BRA     E68
0E52:  CP0.B   83E
0E54:  BRA     NZ,E68
....................    res -= 1.0; 
0E56:  BSET.B  43.0
0E58:  MOV     844,W0
0E5A:  MOV     846,W1
0E5C:  MOV     #0,W2
0E5E:  MOV     #3F80,W3
0E60:  CALL    A4A
0E64:  MOV     W0,844
0E66:  MOV     W1,846
....................  
....................   if (s == 0 && n == 1) 
0E68:  BTSC.B  83F.0
0E6A:  BRA     E84
0E6C:  MOV     83E,W4
0E6E:  CP.B    W4L,#1
0E70:  BRA     NZ,E84
....................    res += 1.0; 
0E72:  BCLR.B  43.0
0E74:  MOV     844,W0
0E76:  MOV     846,W1
0E78:  MOV     #0,W2
0E7A:  MOV     #3F80,W3
0E7C:  CALL    A4A
0E80:  MOV     W0,844
0E82:  MOV     W1,846
....................  } 
....................  if (x == 0) 
0E84:  MOV     83A,W0
0E86:  MOV     83C,W1
0E88:  MOV     #0,W2
0E8A:  MOV     #0,W3
0E8C:  CALL    BEA
0E90:  BRA     NZ,E96
....................     res = 0; 
0E92:  CLR     844
0E94:  CLR     846
....................  
....................  return (res); 
0E96:  MOV     844,W0
0E98:  MOV     846,W1
.................... } 
0E9A:  MOV     [--W15],W6
0E9C:  MOV     [--W15],W5
0E9E:  RETURN  
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
*
13E4:  MOV     W5,[W15++]
13E6:  MOV     W6,[W15++]
13E8:  MOV     W7,[W15++]
13EA:  MOV     W8,[W15++]
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
13EC:  BCLR.B  84F.0
....................    y = x; 
13EE:  PUSH    846
13F0:  POP     850
13F2:  PUSH    848
13F4:  POP     852
13F6:  PUSH    84A
13F8:  POP     854
13FA:  PUSH    84C
13FC:  POP     856
....................  
....................    if (x < 0) 
13FE:  MOV     846,W0
1400:  MOV     848,W1
1402:  MOV     84A,W2
1404:  MOV     84C,W3
1406:  MOV     #0,W4
1408:  MOV     #0,W5
140A:  MOV     #0,W6
140C:  MOV     #0,W7
140E:  CALL    1026
1412:  BRA     NC,1418
....................    { 
....................       s = 1; 
1414:  BSET.B  84F.0
....................       y = -y; 
1416:  BTG.B   857.7
....................    } 
....................  
....................    if (y <= 32768.0) 
1418:  MOV     850,W0
141A:  MOV     852,W1
141C:  MOV     854,W2
141E:  MOV     856,W3
1420:  MOV     #0,W4
1422:  MOV     #0,W5
1424:  MOV     #0,W6
1426:  MOV     #40E0,W7
1428:  CALL    1026
142C:  BRA     C,1430
142E:  BRA     NZ,1450
....................   res = (float64)(unsigned int16)y; 
1430:  MOV     850,W0
1432:  MOV     852,W1
1434:  MOV     854,W2
1436:  MOV     856,W3
1438:  CALL    10AA
143C:  MOV     #0,W1
143E:  MOV     #0,W2
1440:  MOV     #0,W3
1442:  CALL    EB4
1446:  MOV     W0,858
1448:  MOV     W1,85A
144A:  MOV     W2,85C
144C:  MOV     W3,85E
....................  
....................  else if (y < 10000000.0) 
144E:  BRA     1554
1450:  MOV     850,W0
1452:  MOV     852,W1
1454:  MOV     854,W2
1456:  MOV     856,W3
1458:  MOV     #0,W4
145A:  MOV     #0,W5
145C:  MOV     #12D0,W6
145E:  MOV     #4163,W7
1460:  CALL    1026
1464:  BRA     NC,1544
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1466:  MOV     850,W0
1468:  MOV     852,W1
146A:  MOV     854,W2
146C:  MOV     856,W3
146E:  MOV     #0,W4
1470:  MOV     #0,W5
1472:  MOV     #0,W6
1474:  MOV     #40E0,W7
1476:  CALL    1100
147A:  CALL    10AA
147E:  MOV     W0,860
....................       y = 32768.0*(y/32768.0 - (float64)l); 
1480:  MOV     850,W0
1482:  MOV     852,W1
1484:  MOV     854,W2
1486:  MOV     856,W3
1488:  MOV     #0,W4
148A:  MOV     #0,W5
148C:  MOV     #0,W6
148E:  MOV     #40E0,W7
1490:  CALL    1100
1494:  MOV     W0,W5
1496:  MOV     W1,W6
1498:  MOV     W2,W7
149A:  MOV     W3,W8
149C:  MOV     860,W0
149E:  MOV     #0,W1
14A0:  MOV     #0,W2
14A2:  MOV     #0,W3
14A4:  CALL    EB4
14A8:  BSET.B  43.0
14AA:  MOV     W5,[W15++]
14AC:  MOV     W6,[W15++]
14AE:  MOV     W7,[W15++]
14B0:  MOV     W0,W4
14B2:  MOV     W5,W0
14B4:  MOV     W1,W5
14B6:  MOV     W6,W1
14B8:  MOV     W2,W6
14BA:  MOV     W7,W2
14BC:  MOV     W3,W7
14BE:  MOV     W8,W3
14C0:  CALL    1208
14C4:  MOV     [--W15],W7
14C6:  MOV     [--W15],W6
14C8:  MOV     [--W15],W5
14CA:  MOV     W0,W4
14CC:  MOV     W1,W5
14CE:  MOV     W2,W6
14D0:  MOV     W3,W7
14D2:  MOV     #0,W0
14D4:  MOV     #0,W1
14D6:  MOV     #0,W2
14D8:  MOV     #40E0,W3
14DA:  CALL    F18
14DE:  MOV     W0,850
14E0:  MOV     W1,852
14E2:  MOV     W2,854
14E4:  MOV     W3,856
....................   res = 32768.0*(float64)l; 
14E6:  MOV     860,W0
14E8:  MOV     #0,W1
14EA:  MOV     #0,W2
14EC:  MOV     #0,W3
14EE:  CALL    EB4
14F2:  MOV     W0,W4
14F4:  MOV     W1,W5
14F6:  MOV     W2,W6
14F8:  MOV     W3,W7
14FA:  MOV     #0,W0
14FC:  MOV     #0,W1
14FE:  MOV     #0,W2
1500:  MOV     #40E0,W3
1502:  CALL    F18
1506:  MOV     W0,858
1508:  MOV     W1,85A
150A:  MOV     W2,85C
150C:  MOV     W3,85E
....................   res += (float64)(unsigned int16)y; 
150E:  MOV     850,W0
1510:  MOV     852,W1
1512:  MOV     854,W2
1514:  MOV     856,W3
1516:  CALL    10AA
151A:  MOV     #0,W1
151C:  MOV     #0,W2
151E:  MOV     #0,W3
1520:  CALL    EB4
1524:  BCLR.B  43.0
1526:  MOV     W0,W4
1528:  MOV     W1,W5
152A:  MOV     W2,W6
152C:  MOV     W3,W7
152E:  MOV     858,W0
1530:  MOV     85A,W1
1532:  MOV     85C,W2
1534:  MOV     85E,W3
1536:  CALL    1208
153A:  MOV     W0,858
153C:  MOV     W1,85A
153E:  MOV     W2,85C
1540:  MOV     W3,85E
....................  } 
....................  
....................  else 
1542:  BRA     1554
....................   res = y; 
1544:  PUSH    850
1546:  POP     858
1548:  PUSH    852
154A:  POP     85A
154C:  PUSH    854
154E:  POP     85C
1550:  PUSH    856
1552:  POP     85E
....................  
....................  y = y - (float64)(unsigned int16)y; 
1554:  MOV     850,W0
1556:  MOV     852,W1
1558:  MOV     854,W2
155A:  MOV     856,W3
155C:  CALL    10AA
1560:  MOV     #0,W1
1562:  MOV     #0,W2
1564:  MOV     #0,W3
1566:  CALL    EB4
156A:  BSET.B  43.0
156C:  MOV     W0,W4
156E:  MOV     W1,W5
1570:  MOV     W2,W6
1572:  MOV     W3,W7
1574:  MOV     850,W0
1576:  MOV     852,W1
1578:  MOV     854,W2
157A:  MOV     856,W3
157C:  CALL    1208
1580:  MOV     W0,850
1582:  MOV     W1,852
1584:  MOV     W2,854
1586:  MOV     W3,856
....................  
....................  if (s) 
1588:  BTSS.B  84F.0
158A:  BRA     158E
....................   res = -res; 
158C:  BTG.B   85F.7
....................  
....................  if (y != 0) 
158E:  MOV     850,W0
1590:  MOV     852,W1
1592:  MOV     854,W2
1594:  MOV     856,W3
1596:  MOV     #0,W4
1598:  MOV     #0,W5
159A:  MOV     #0,W6
159C:  MOV     #0,W7
159E:  CALL    1026
15A2:  BRA     Z,15F2
....................  { 
....................   if (s == 1 && n == 0) 
15A4:  BTSS.B  84F.0
15A6:  BRA     15CA
15A8:  CP0.B   84E
15AA:  BRA     NZ,15CA
....................    res -= 1.0; 
15AC:  BSET.B  43.0
15AE:  MOV     858,W0
15B0:  MOV     85A,W1
15B2:  MOV     85C,W2
15B4:  MOV     85E,W3
15B6:  MOV     #0,W4
15B8:  MOV     #0,W5
15BA:  MOV     #0,W6
15BC:  MOV     #3FF0,W7
15BE:  CALL    1208
15C2:  MOV     W0,858
15C4:  MOV     W1,85A
15C6:  MOV     W2,85C
15C8:  MOV     W3,85E
....................  
....................   if (s == 0 && n == 1) 
15CA:  BTSC.B  84F.0
15CC:  BRA     15F2
15CE:  MOV     84E,W4
15D0:  CP.B    W4L,#1
15D2:  BRA     NZ,15F2
....................    res += 1.0; 
15D4:  BCLR.B  43.0
15D6:  MOV     858,W0
15D8:  MOV     85A,W1
15DA:  MOV     85C,W2
15DC:  MOV     85E,W3
15DE:  MOV     #0,W4
15E0:  MOV     #0,W5
15E2:  MOV     #0,W6
15E4:  MOV     #3FF0,W7
15E6:  CALL    1208
15EA:  MOV     W0,858
15EC:  MOV     W1,85A
15EE:  MOV     W2,85C
15F0:  MOV     W3,85E
....................  } 
....................  if (x == 0) 
15F2:  MOV     846,W0
15F4:  MOV     848,W1
15F6:  MOV     84A,W2
15F8:  MOV     84C,W3
15FA:  MOV     #0,W4
15FC:  MOV     #0,W5
15FE:  MOV     #0,W6
1600:  MOV     #0,W7
1602:  CALL    1026
1606:  BRA     NZ,1610
....................     res = 0; 
1608:  CLR     858
160A:  CLR     85A
160C:  CLR     85C
160E:  CLR     85E
....................  
....................  return (res); 
1610:  MOV     858,W0
1612:  MOV     85A,W1
1614:  MOV     85C,W2
1616:  MOV     85E,W3
.................... } 
1618:  MOV     [--W15],W8
161A:  MOV     [--W15],W7
161C:  MOV     [--W15],W6
161E:  MOV     [--W15],W5
1620:  RETURN  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
*
163C:  CLR.B   83E
163E:  PUSH    832
1640:  POP     83A
1642:  PUSH    834
1644:  POP     83C
1646:  CALL    D48
164A:  MOV.D   W0,W0
.................... } 
164C:  RETURN  
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
0EA0:  MOV.B   #1,W0L
0EA2:  MOV.B   W0L,83E
0EA4:  PUSH    832
0EA6:  POP     83A
0EA8:  PUSH    834
0EAA:  POP     83C
0EAC:  CALL    D48
0EB0:  MOV.D   W0,W0
.................... } 
0EB2:  RETURN  
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
1622:  MOV.B   #1,W0L
1624:  MOV.B   W0L,84E
1626:  PUSH    836
1628:  POP     846
162A:  PUSH    838
162C:  POP     848
162E:  PUSH    83A
1630:  POP     84A
1632:  PUSH    83C
1634:  POP     84C
1636:  CALL    13E4
.................... } 
163A:  RETURN  
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES FRC_PLL16             	//Internal Fast RC oscillator with 16X PLL 
.................... #FUSES NOCKSFSM              	//Clock Switching is disabled, fail Safe clock monitor is disabled 
.................... //#FUSES NOPUT                 	//No Power Up Timer 
.................... //#FUSES BORV27						// 
.................... //#FUSES BROWNOUT					//brownout reset 
....................  
.................... #FUSES PUT64                 	//No Power Up Timer PUT64  
.................... #FUSES BORV42						//42 
.................... #FUSES BROWNOUT					//brownout reset 
....................  
....................  
....................  
.................... #use delay(clock=117920000) //7.37Mhz x16 
.................... //#use fixed_IO(E_outputs = PIN_E0,PIN_E0,PIN_E1,PIN_E1,PIN_E2,PIN_E2) 
....................  
.................... #use fast_io(B) 
.................... #use fast_io(C) 
.................... #use fast_io(D) 
.................... #use fast_io(E) 
.................... #use fast_io(F) 
....................  
.................... //#define Debug_serial 1 
.................... #ifdef Debug_serial 
.................... 	#use rs232(baud=9600,uart1,stream=PICkit,parity=N,bits=8) 
.................... #endif 
....................  
.................... const unsigned int8 ckp[2700] = {128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,110,93,76,61,46,34,23,14,7,3,1,2,5,10,18,28,40,53,68,85,102,119,137,154,171,188,203,216,228,238,246,251,254,255,253,249,242,233,222,210,195,180,163,146,128,122,117,111,105,98,89,81,72,62,53,43,34,25,18,11,6,3,1,1,3,6,10,16,23,31,40,48,57,65,73,81,88,94,99,104,108,111,114,116,118,119,120,121,122,122,123,123,123,123,123,123,124,124,124,124,124,124,125,125,125,125,126,126,126,127,127,127,128,128,129,129,129,129,130,130,130,130,131,131,131,131,131,131,132,132,132,132,132,133,133,133,134,135,136,137,139,142,144,148,152,157,163,169,176,184,192,200,209,217,226,233,240,246,250,253,254,254,251,247,242,235,227,219,210,200,190,181,172,163,156,148,142,136,132}; 
....................  
.................... static unsigned int16  s_n; 
*
1662:  CLR     800
....................  
.................... static unsigned int16 tmr2_m; 
1664:  CLR     802
.................... static unsigned int16 tmr2_n; 
1666:  CLR     804
.................... static unsigned int16 tmr2_width; 
1668:  CLR     806
.................... static unsigned int16 tmr2_frecu; 
166A:  CLR     808
.................... static unsigned int8  f_150; 
166C:  CLR.B   80A
....................  
.................... static unsigned int32 adc_sum; 
166E:  CLR     80C
1670:  CLR     80E
.................... static unsigned int16 adc_i; 
1672:  CLR     810
.................... static unsigned int8  adc; 
1674:  CLR.B   80B
.................... static unsigned int16 adc_val[2]; 
1676:  CLR     812
1678:  CLR     814
.................... static float          adc_vol[2]; 
167A:  CLR     816
167C:  CLR     818
167E:  CLR     81A
1680:  CLR     81C
.................... static float          adc_sen[2]; 
1682:  CLR     81E
1684:  CLR     820
1686:  CLR     822
1688:  CLR     824
....................  
.................... static unsigned int8 data; 
168A:  CLR.B   826
.................... static float value; 
168C:  CLR     828
168E:  CLR     82A
....................  
.................... #include <interrupt.c> 
....................  #int_TIMER1 
.................... void  TIMER1_isr(void) { //sin + desfase 
*
0824:  PUSH    42
0826:  PUSH    36
0828:  MOV     W0,[W15++]
082A:  MOV     #2,W0
082C:  REPEAT  #C
082E:  MOV     [W0++],[W15++]
.................... 	output_e((input_e()&0b100000000)|ckp[s_n]); //OUTPUT_B(~input_b()); 
0830:  MOV     2DA,W5
0832:  AND     #100,W5
0834:  MOV     800,W0
0836:  CALL    100
083A:  IOR      W5,  W0,W5
083C:  MOV     W5,2DC
.................... 	output_f((ckp[s_n]>>6));//||(input_f()&&0b11111100)); 
083E:  MOV     800,W0
0840:  CALL    100
0844:  CLR.B   1
0846:  LSR     W0,#6,W5
0848:  PUSH    2E2
084A:  MOV.B   W5L,[W15-#2]
084C:  POP     2E2
084E:  CLR.B   2E3
....................        
....................    if(s_n==1383) 
0850:  MOV     800,W4
0852:  MOV     #567,W3
0854:  CP      W3,W4
0856:  BRA     NZ,85C
....................       output_toggle(PIN_C15);//sincro   CMP 
0858:  BTG.B   2D1.7
....................    else if((s_n==472)||(s_n==1732)) 
085A:  BRA     87E
085C:  MOV     800,W4
085E:  XOR     #1D8,W4
0860:  BRA     Z,86A
0862:  MOV     800,W4
0864:  MOV     #6C4,W3
0866:  CP      W3,W4
0868:  BRA     NZ,86E
....................       output_high(PIN_C13);//Ks E8 
086A:  BSET.B  2D1.5
....................    else if((s_n==494)||(s_n==1754)) 
086C:  BRA     87E
086E:  MOV     800,W4
0870:  XOR     #1EE,W4
0872:  BRA     Z,87C
0874:  MOV     800,W4
0876:  MOV     #6DA,W3
0878:  CP      W3,W4
087A:  BRA     NZ,87E
....................       output_low(PIN_C13);//Ks E8 
087C:  BCLR.B  2D1.5
....................     
....................    s_n++; 
087E:  INC     0800
....................    if(s_n>=2700)//0-2699 
0880:  MOV     800,W4
0882:  MOV     #A8C,W3
0884:  CP      W3,W4
0886:  BRA     GTU,88A
....................    	s_n=0; 
0888:  CLR     800
.................... } 
....................  
088A:  BCLR.B  84.3
088C:  MOV     #1A,W0
088E:  REPEAT  #C
0890:  MOV     [--W15],[W0--]
0892:  MOV     [--W15],W0
0894:  POP     36
0896:  POP     42
0898:  RETFIE  
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) {	//1hz   Oxigeno                               
089A:  PUSH    42
089C:  PUSH    36
089E:  MOV     W0,[W15++]
08A0:  MOV     #2,W0
08A2:  REPEAT  #C
08A4:  MOV     [W0++],[W15++]
.................... 	if  (tmr2_m<=20750) output_high(PIN_E8);//C13 
08A6:  MOV     802,W4
08A8:  MOV     #510E,W3
08AA:  CP      W3,W4
08AC:  BRA     NC,8B2
08AE:  BSET.B  2DD.0
....................    else output_low(PIN_E8);//C13 
08B0:  BRA     8B4
08B2:  BCLR.B  2DD.0
....................  
....................    tmr2_m++; 
08B4:  INC     0802
....................    if(tmr2_m>=41500) tmr2_m=0; 
08B6:  MOV     802,W4
08B8:  MOV     #A21C,W3
08BA:  CP      W3,W4
08BC:  BRA     GTU,8C0
08BE:  CLR     802
....................     
....................    //1 - 150 Hz Vss 
.................... 	if  (tmr2_n<=tmr2_width) output_high(PIN_C14); 
08C0:  MOV     804,W0
08C2:  MOV     806,W4
08C4:  CP      W4,W0
08C6:  BRA     NC,8CC
08C8:  BSET.B  2D1.6
....................    else output_low(PIN_C14); 
08CA:  BRA     8CE
08CC:  BCLR.B  2D1.6
....................  
....................    tmr2_n++; 
08CE:  INC     0804
....................    if(tmr2_n>=tmr2_frecu) tmr2_n=0; 
08D0:  MOV     808,W0
08D2:  MOV     804,W4
08D4:  CP      W4,W0
08D6:  BRA     NC,8DA
08D8:  CLR     804
.................... } 
....................  
08DA:  BCLR.B  84.6
08DC:  MOV     #1A,W0
08DE:  REPEAT  #C
08E0:  MOV     [--W15],[W0--]
08E2:  MOV     [--W15],W0
08E4:  POP     36
08E6:  POP     42
08E8:  RETFIE  
.................... #int_ADC1 
.................... void  ADC1_isr(void) { 
08EA:  PUSH    42
08EC:  PUSH    36
08EE:  MOV     W0,[W15++]
08F0:  MOV     #2,W0
08F2:  REPEAT  #C
08F4:  MOV     [W0++],[W15++]
....................    adc_sum+=read_adc(ADC_READ_ONLY); 
08F6:  BTSS.B  2A0.0
08F8:  BRA     8F6
08FA:  MOV     280,W0
08FC:  ADD     80C
08FE:  MOV     #0,W0
0900:  ADDC    80E,W0
0902:  MOV     W0,80E
....................    adc_i++; 
0904:  INC     0810
....................    if(adc_i>=256) { 
0906:  MOV     810,W4
0908:  MOV     #100,W3
090A:  CP      W3,W4
090C:  BRA     GTU,93E
....................       adc_val[adc]=(int16)(adc_sum>>8); 
090E:  MOV.B   80B,W0L
0910:  CLR.B   1
0912:  SL      W0,#1,W0
0914:  MOV     #812,W4
0916:  ADD     W0,W4,W5
0918:  MOV.B   80D,W0L
091A:  MOV.B   80E,W0L
091C:  MOV.B   W0L,1
091E:  MOV.B   80F,W0L
0920:  MOV     W0,W1
0922:  CLR.B   3
0924:  MOV     W0,[W5]
....................        
....................       adc_sum=0; 
0926:  CLR     80C
0928:  CLR     80E
....................       adc_i=0; 
092A:  CLR     810
....................        
....................       adc++; 
092C:  INC.B   080B
....................       if(adc==2) adc=0; 
092E:  MOV     80A,W4
0930:  LSR     W4,#8,W4
0932:  CP.B    W4L,#2
0934:  BRA     NZ,938
0936:  CLR.B   80B
....................       set_adc_channel(adc); 
0938:  MOV.B   80B,W0L
093A:  MOV.B   W0L,2A6
093C:  CLR.B   2A7
....................    } 
....................    read_adc(ADC_START_ONLY); 
093E:  BCLR.B  2A0.0
0940:  BSET.B  2A0.1
.................... } 
....................  
.................... #include <function.c> 
0942:  BCLR.B  85.3
0944:  MOV     #1A,W0
0946:  REPEAT  #C
0948:  MOV     [--W15],[W0--]
094A:  MOV     [--W15],W0
094C:  POP     36
094E:  POP     42
0950:  RETFIE  
.................... #inline 
.................... void start (void) { 
....................    setup_spi( FALSE ); 
*
1690:  BCLR.B  221.7
....................     
.................... 	setup_adc_ports(sAN0|sAN1,VSS_VDD ); 
1692:  MOV     #FFFC,W4
1694:  MOV     W4,2A8
1696:  CLR     2A2
.................... 	setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_16);//setup_adc(ADC_CLOCK_DIV_4|ADC_TAD_MUL_8); 
1698:  MOV     #100F,W4
169A:  MOV     W4,2A4
169C:  MOV     #80E0,W4
169E:  MOV     W4,2A0
.................... 	 
.................... 	setup_timer1(TMR_INTERNAL | TMR_DIV_BY_1, 1165); //sin 
16A0:  CLR     104
16A2:  MOV     #48D,W4
16A4:  MOV     W4,102
16A6:  MOV     #A000,W4
16A8:  MOV     W4,104
.................... 	setup_timer2(TMR_INTERNAL | TMR_DIV_BY_64, 10);//1hz   //1-150hz 
16AA:  CLR     110
16AC:  MOV     #A,W4
16AE:  MOV     W4,10C
16B0:  MOV     #A020,W4
16B2:  MOV     W4,110
.................... 	//setup_timer3(TMR_INTERNAL | TMR_DIV_BY_256, 56850);//1hz  
....................  
.................... 	set_tris_b(0b100001111);// B7-B4 4-lsb 
16B4:  MOV     #10F,W4
16B6:  MOV     W4,2C6
.................... 	set_tris_c(0b0001111111111111);//c15 sin_sincro  c14 1-150hz  c13 1hz 
16B8:  MOV     #1FFF,W4
16BA:  MOV     W4,2CC
.................... 	set_tris_d(0b11110000);// D4-D0 4-msb 
16BC:  MOV     #F0,W4
16BE:  MOV     W4,2D2
.................... 	set_tris_e(0b011000000);//E8 Oxi  E5-E0 6-lsb SIN 
16C0:  MOV     #C0,W4
16C2:  MOV     W4,2D8
.................... 	set_tris_f(0b11110100);// D4-D0 2-msb SIN 
16C4:  MOV     #F4,W4
16C6:  MOV     W4,2DE
.................... 	 
.................... 	enable_interrupts(INT_ADC1); 
16C8:  BSET.B  8D.3
.................... 	enable_interrupts(int_timer1); 
16CA:  BSET.B  8C.3
....................    enable_interrupts(int_timer2); 
16CC:  BSET.B  8C.6
.................... 	 
.................... 	set_adc_channel(adc); 
16CE:  MOV.B   80B,W0L
16D0:  MOV.B   W0L,2A6
16D2:  CLR.B   2A7
....................    read_adc(ADC_START_ONLY); 
16D4:  BCLR.B  2A0.0
16D6:  BSET.B  2A0.1
.................... } 
....................  
.................... #inline 
.................... void debug_PICkit(void) { 
.................... 	#ifdef Debug_serial 
.................... 		static unsigned  int8 option; 
....................       if(kbhit(PICkit)) { 
....................          option=fgetc(PICkit); 
....................          if(option=='1') 
....................             fprintf(PICkit,"ADC0 val:%4Lu vol:%1.3e sen:%1.3e\r\n",adc_val[0],adc_vol[0],adc_sen[0]); 
....................          else if(option=='2') 
....................             fprintf(PICkit,"ADC1 val:%4Lu vol:%1.3e sen:%1.3e\r\n",adc_val[1],adc_vol[1],adc_sen[1]); 
....................          else if(option=='d') 
....................             fprintf(PICkit,"value:%1.3e max:%1.3e data:%3u \r\n",value,max,data); 
....................          /*else if(option=='v') 
....................             fprintf(PICkit,"widt %5Lu \r\n",tmr2_width);*/ 
....................          } 
....................    #endif 
.................... } 
....................  
.................... #inline 
.................... void get_adc_val_sen(void) { 
....................    adc_vol[0]=(float)adc_val[0]*0.0048828;//Tps 
16D8:  MOV     812,W0
16DA:  CALL    952
16DE:  MOV     W0,W5
16E0:  MOV     W1,W6
16E2:  MOV     W5,W0
16E4:  MOV     W6,W1
16E6:  MOV     #FFE5,W2
16E8:  MOV     #3B9F,W3
16EA:  CALL    98C
16EE:  MOV     W0,816
16F0:  MOV     W1,818
....................    adc_vol[1]=(float)adc_val[1]*0.0048828;//Vss 
16F2:  MOV     814,W0
16F4:  CALL    952
16F8:  MOV     W0,W5
16FA:  MOV     W1,W6
16FC:  MOV     W5,W0
16FE:  MOV     W6,W1
1700:  MOV     #FFE5,W2
1702:  MOV     #3B9F,W3
1704:  CALL    98C
1708:  MOV     W0,81A
170A:  MOV     W1,81C
....................     
....................    adc_sen[0]=adc_vol[0];//TPS 
170C:  PUSH    816
170E:  POP     81E
1710:  PUSH    818
1712:  POP     820
....................    adc_sen[1]=adc_vol[1]*30;//VSS 
1714:  MOV     81A,W0
1716:  MOV     81C,W1
1718:  MOV     #0,W2
171A:  MOV     #41F0,W3
171C:  CALL    98C
1720:  MOV     W0,822
1722:  MOV     W1,824
.................... } 
....................  
.................... #inline 
.................... void time_sin(void) { //500hz=1165   4khz=145   10bits CKP 
....................       setup_timer1(TMR_INTERNAL | TMR_DIV_BY_1, (1165-(1023-adc_val[0]))); 
*
1814:  MOV     #3FF,W4
1816:  MOV     812,W3
1818:  SUB     W4,W3,W0
181A:  MOV     #48D,W4
181C:  SUB     W4,W0,W5
181E:  CLR     104
1820:  MOV     W5,102
1822:  MOV     #A000,W4
1824:  MOV     W4,104
.................... } 
....................  
.................... #inline 
.................... void time_150(void) { //1hz=41500   150hz=277   10bits VSS 
....................       f_150=(1+ceil(0.190*adc_val[1])); 
1826:  MOV     814,W0
1828:  MOV     #0,W1
182A:  MOV     #0,W2
182C:  MOV     #0,W3
182E:  CALL    EB4
1832:  MOV     W0,W4
1834:  MOV     W1,W5
1836:  MOV     W2,W6
1838:  MOV     W3,W7
183A:  MOV     #B852,W0
183C:  MOV     #851E,W1
183E:  MOV     #51EB,W2
1840:  MOV     #3FC8,W3
1842:  CALL    F18
1846:  MOV     W0,W5
1848:  MOV     W1,W6
184A:  MOV     W2,W7
184C:  MOV     W3,W8
184E:  MOV     W5,836
1850:  MOV     W6,838
1852:  MOV     W7,83A
1854:  MOV     W8,83C
1856:  CALL    1622
185A:  BCLR.B  43.0
185C:  MOV     W0,W4
185E:  MOV     W1,W5
1860:  MOV     W2,W6
1862:  MOV     W3,W7
1864:  MOV     #0,W0
1866:  MOV     #0,W1
1868:  MOV     #0,W2
186A:  MOV     #3FF0,W3
186C:  CALL    1208
1870:  CALL    10AA
1874:  MOV.B   W0L,80A
....................       tmr2_frecu=floor(41500/f_150); 
1876:  MOV     #A21C,W4
1878:  MOV     80A,W3
187A:  CLR.B   7
187C:  REPEAT  #11
187E:  DIV.U   W4,W3
1880:  CALL    952
1884:  MOV     W0,W5
1886:  MOV     W1,W6
1888:  MOV     W5,832
188A:  MOV     W6,834
188C:  CALL    163C
1890:  CALL    C52
1894:  MOV     W0,808
....................       tmr2_width=ceil(tmr2_frecu/2); 
1896:  MOV     808,W0
1898:  LSR     W0,#1,W0
189A:  CALL    952
189E:  MOV     W0,W5
18A0:  MOV     W1,W6
18A2:  MOV     W5,832
18A4:  MOV     W6,834
18A6:  CALL    EA0
18AA:  CALL    C52
18AE:  MOV     W0,806
.................... } 
....................  
.................... #inline 
.................... void dac8(void) { //500hz=1165   4khz=145   10bits MAP 
.................... 	data=(int8)ceil(value*51); 
*
17EA:  MOV     828,W0
17EC:  MOV     82A,W1
17EE:  MOV     #0,W2
17F0:  MOV     #424C,W3
17F2:  CALL    98C
17F6:  MOV     W0,W5
17F8:  MOV     W1,W6
17FA:  MOV     W5,832
17FC:  MOV     W6,834
17FE:  CALL    EA0
1802:  CALL    C52
1806:  MOV.B   W0L,826
....................  
.................... 	output_d(data); //OUTPUT_B(~input_b()); 
1808:  MOV.B   826,W0L
180A:  MOV.B   W0L,2D6
180C:  CLR.B   2D7
.................... 	output_b(data);//||(input_f()&&0b11111100)); 
180E:  MOV.B   826,W0L
1810:  MOV.B   W0L,2CA
1812:  CLR.B   2CB
.................... } 
....................  
....................  
....................  
....................  
.................... void main() 
.................... { 
*
164E:  MOV     #4444,W0
1650:  MOV     W0,94
1652:  MOV     #4444,W0
1654:  MOV     W0,98
1656:  BSET.B  81.7
1658:  SETM    2A8
165A:  MOV     #F80,W15
165C:  MOV     #FFF,W0
165E:  MOV     W0,20
1660:  NOP     
.................... 	start(); 
.................... 	while(true) { 
.................... 		get_adc_val_sen(); 
.................... 		 
.................... 		//MAP     f = p00 + p10*x + p01*y + p20*x^2 + p11*x*y + p02*y^2;        subs(f, [x, y], [vss, tps]) 
.................... 		value = -14.49 + 0.1403*adc_sen[1] + 9.239*adc_sen[0] + -0.0003145*adc_sen[1]*adc_sen[1] + -0.03021*adc_sen[1]*adc_sen[0] -1.363*adc_sen[0]*adc_sen[0]; 
*
1724:  MOV     #AACE,W0
1726:  MOV     #3E0F,W1
1728:  MOV     822,W2
172A:  MOV     824,W3
172C:  CALL    98C
1730:  BCLR.B  43.0
1732:  MOV     W0,W2
1734:  MOV     W1,W3
1736:  MOV     #D70A,W0
1738:  MOV     #C167,W1
173A:  CALL    A4A
173E:  MOV     W0,W5
1740:  MOV     W1,W6
1742:  MOV     #D2F2,W0
1744:  MOV     #4113,W1
1746:  MOV     81E,W2
1748:  MOV     820,W3
174A:  CALL    98C
174E:  BCLR.B  43.0
1750:  MOV     W0,W2
1752:  MOV     W1,W3
1754:  MOV     W5,W0
1756:  MOV     W6,W1
1758:  CALL    A4A
175C:  MOV     W0,W5
175E:  MOV     W1,W6
1760:  MOV     #E37A,W0
1762:  MOV     #B9A4,W1
1764:  MOV     822,W2
1766:  MOV     824,W3
1768:  CALL    98C
176C:  MOV     W0,W7
176E:  MOV     W1,W8
1770:  MOV     W7,W0
1772:  MOV     W8,W1
1774:  MOV     822,W2
1776:  MOV     824,W3
1778:  CALL    98C
177C:  BCLR.B  43.0
177E:  MOV     W0,W2
1780:  MOV     W1,W3
1782:  MOV     W5,W0
1784:  MOV     W6,W1
1786:  CALL    A4A
178A:  MOV     W0,W5
178C:  MOV     W1,W6
178E:  MOV     #7AF6,W0
1790:  MOV     #BCF7,W1
1792:  MOV     822,W2
1794:  MOV     824,W3
1796:  CALL    98C
179A:  MOV     W0,W7
179C:  MOV     W1,W8
179E:  MOV     W7,W0
17A0:  MOV     W8,W1
17A2:  MOV     81E,W2
17A4:  MOV     820,W3
17A6:  CALL    98C
17AA:  BCLR.B  43.0
17AC:  MOV     W0,W2
17AE:  MOV     W1,W3
17B0:  MOV     W5,W0
17B2:  MOV     W6,W1
17B4:  CALL    A4A
17B8:  MOV     W0,W5
17BA:  MOV     W1,W6
17BC:  MOV     #76C9,W0
17BE:  MOV     #3FAE,W1
17C0:  MOV     81E,W2
17C2:  MOV     820,W3
17C4:  CALL    98C
17C8:  MOV     W0,W7
17CA:  MOV     W1,W8
17CC:  MOV     W7,W0
17CE:  MOV     W8,W1
17D0:  MOV     81E,W2
17D2:  MOV     820,W3
17D4:  CALL    98C
17D8:  BSET.B  43.0
17DA:  MOV     W0,W2
17DC:  MOV     W1,W3
17DE:  MOV     W5,W0
17E0:  MOV     W6,W1
17E2:  CALL    A4A
17E6:  MOV     W0,828
17E8:  MOV     W1,82A
.................... 		dac8(); 
.................... 		// 
.................... 		 
.................... 		time_sin();//500-4Khz CKP 
.................... 		 
.................... 		time_150();//0-150Hz VSS 
.................... 		 
.................... 		debug_PICkit(); 
.................... 	} 
*
18B0:  BRA     16D8
.................... } 
18B2:  PWRSAV  #0

Configuration Fuses:
   Word  1L: C303   PR NOCKSFSM FRC_PLL16
          H: 0000  
   Word  2L: 003F   NOWDT WPSB16 WPSA512
          H: 0000  
   Word  3L: 8793   PUT64 BROWNOUT BORV42 LPOL_HIGH HPOL_HIGH NOPWMPIN MCLR
          H: 0000  
   Word  4L: 310F  
          H: 0000  
   Word  5L: 330F  
          H: 0000  
   Word  6L: 0007   NOPROTECT NOWRT
          H: 0000  
   Word  7L: C003   NODEBUG NOCOE ICSP1
          H: 0000  
